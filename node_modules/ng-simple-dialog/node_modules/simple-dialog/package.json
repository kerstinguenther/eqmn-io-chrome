{
  "name": "simple-dialog",
  "version": "0.2.0",
  "description": "A minimal modal dialog implementation",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "build-bundle": "lessc less/dialog.less > dist/dialog.css && browserify index.js -s SimpleDialog -o dist/dialog.js && uglifyjs dist/dialog.js -cm > dist/dialog.min.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nikku/simple-dialog"
  },
  "keywords": [
    "dialog",
    "modal",
    "web",
    "overlay",
    "emitter",
    "browserify"
  ],
  "author": {
    "name": "Nico Rehwaldt",
    "email": "git_nikku@nixis.de"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nikku/simple-dialog/issues"
  },
  "browserify": {
    "transform": [
      "stringify"
    ]
  },
  "homepage": "https://github.com/nikku/simple-dialog",
  "devDependencies": {
    "browserify": "^9.0.3",
    "less": "^2.4.0",
    "stringify": "^3.1.0",
    "uglify-js": "^2.4.17"
  },
  "dependencies": {
    "domify": "^1.3.2"
  },
  "readme": "# simple-dialog\n\nA simple, yet powerful dialog implementation.\n\n\n## Features\n\n* (optional) backdrop\n* (optional) close handle\n* (optional) modal\n* event emitter\n* return values\n\n\n## Usage\n\n```javascript\nvar SimpleDialog = require('simple-dialog');\n\nvar dialog = SimpleDialog({\n  template: '<h1>HEADER</h1>',\n});\n\n// get result value\ndialog.on('close', function(returnValue) {\n  console.log('dialog closed with', returnValue);\n});\n\n// open dialog\ndialog.open();\n\n// close with value\ndialog.close({ foo: 'BAR' });\n```\n\n\n## Extensible\n\nYou may hook into various dialog life-cycle events in order to extend it to fit into your favourite front-end library. An integration into [AngularJS](https://angularjs.org/) may look like this:\n\n\n```javascript\nvar Dialog = require('simple-dialog');\n\nvar module = angular.module('simpleDialog');\n\nmodule.factory('ngSimpleDialog', function($rootScope, $compile) {\n\n  function getBody(dialog) {\n    return dialog.element.querySelector('.dlg-body');\n  }\n\n  /**\n   * Users may pass a scope argument that will be exposed inside the dialog template.\n   *\n   * @param  {Object} options\n   * @return {SimpleDialog}\n   */\n  return function(options) {\n    var dialog = Dialog(options);\n\n    var body = getBody(dialog);\n    var linkBody = $compile(angular.element(body));\n\n    dialog.on('pre-open', function() {\n      var scope = dialog.scope = $rootScope.$new();\n\n      angular.extend(scope, options.scope || {}, { dialog: dialog });\n\n      var newBody = linkBody(scope),\n          oldBody = getBody(dialog);\n\n      angular.element(oldBody).replaceWith(newBody);\n    });\n\n    dialog.on('close', function() {\n      var scope = dialog.scope;\n\n      scope.$applyAsync();\n      scope.$destroy();\n    });\n\n    return dialog;\n  };\n});\n```\n\nTo use it in your angular app:\n\n```javascript\nvar dialogTemplate =\n  '{{ a }} + {{ b }} <br/>' +\n  '<button ng-click=\"dialog.close(a + b)\">CALCULATE</button>';\n\n\nfunction MyController($scope, ngSimpleDialog) {\n\n  var data = {\n    a: 'A',\n    b: 'B'\n  };\n\n  this.openDialog = function() {\n\n    var dialog = ngSimpleDialog({\n      template: dialogTemplate,\n      scope: data\n    });\n\n    dialog.open().on('close', function(resultValue) {\n      data.resultValue = resultValue\n    });\n  };\n}\n```\n\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "simple-dialog@0.2.0",
  "_from": "simple-dialog@^0.2.0"
}
